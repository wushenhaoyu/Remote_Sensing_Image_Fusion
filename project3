function IHS,MS,PAN
R = MS[*,*,4]
G = MS[*,*,2]
B = MS[*,*,1]
I = (R + G + B) / SQRT(3)
v1 = (R + G - 2 * B) / SQRT(6)
v2 = (R - G) / SQRT(2)
R_ = PAN / SQRT(3) + v1 / SQRT(6) + v2 / SQRT(2)
G_ = PAN / SQRT(3) + v1 / SQRT(6) - v2 / SQRT(2)
B_ = PAN / SQRT(3) - 2 * v1 / SQRT(6)
MS_NEW = FLTARR(1600,1600,3)
MS_NEW[*,*,2] = R_
MS_NEW[*,*,1] = G_
MS_NEW[*,*,0] = B_
return,MS_NEW
END



function PCA,MS
print,SIZE(MS)
s = SIZE(MS)
col_size = s[1]
row_size = s[2]
band = s[3]
MS_ = FLTARR(band,col_size*row_size)
FOR i = 0 , band - 1 DO BEGIN
  MS_[i,*] = REFORM(MS[*,*,i],1,col_size * row_size)
ENDFOR
CM = CORRELATE(MS_,/COVARIANCE)
V = EIGENQL(CM, EIGENVECTORS=vq)
vq = TRANSPOSE(vq)
Y =  FLTARR(col_size,row_size,band)
FOR i = 0 , band - 1 DO BEGIN
  P = MS_[*,*] ## vq[i,*]
  P = REFORM(P,col_size,row_size)
  Y[*,*,i] = P
ENDFOR
return,Y
END

function PCA_t,MS,PAN
print,SIZE(MS)
s = SIZE(MS)
col_size = s[1]
row_size = s[2]
band = s[3]
MS_ = FLTARR(band,col_size*row_size)
FOR i = 0 , band - 1 DO BEGIN
  MS_[i,*] = REFORM(MS[*,*,i],1,col_size * row_size)
ENDFOR
CM = CORRELATE(MS_,/COVARIANCE)
V = EIGENQL(CM, EIGENVECTORS=vq)
vq = TRANSPOSE(vq)
Y =  FLTARR(col_size,row_size,band)
FOR i = 0 , band - 1 DO BEGIN
  P = MS_[*,*] ## vq[i,*]
  P = REFORM(P,col_size,row_size)
  Y[*,*,i] = P
ENDFOR
Y[*,*,0] = PAN
Y_ = FLTARR(band,col_size * row_size)
FOR i = 0 , band - 1 DO BEGIN
  Y_[i,*] = REFORM(Y[*,*,i],1,col_size * row_size)
ENDFOR
vq = TRANSPOSE(vq)
X = FLTARR(col_size,row_size,band)
FOR i = 0 , band - 1 DO BEGIN
  X1 = Y_[*,*] ## vq[i,*]
  X[*,*,i] = REFORM(X1,col_size ,row_size)
ENDFOR
return,X
END

function BT,MS,PAN
s = SIZE(MS)
sum = FLTARR(s[1],s[2])
FOR i = 0 , s[3] - 1 DO BEGIN
  sum = sum + MS[*,*,i]
ENDFOR 
sum = sum / s[3]
result = FLOAT(INDGEN(s[1], s[2], s[3]))
FOR i = 0 , s[3] - 1 DO BEGIN
  result[*,*,i] = MS[*,*,i] / sum * PAN
ENDFOR
return, result
END


function atrous,MS,PAN
    R = MS[*,*,4]
    G = MS[*,*,2]
    B = MS[*,*,1]
    PAN_ = FLOAT(PAN)
    h = FLTARR(1,5)
    h[0] = 0.0625
    h[1] = 0.25
    h[2] = 0.375
    h[3] = 0.25
    h[4] = 0.0625
    h_T = TRANSPOSE(h)
    w = h ## h_T
    s = SIZE(PAN_)
    g_low = CONVOL(PAN_,w, /EDGE_TRUNCATE)
    dp = PAN_ - g_low
    w_ = FLTARR(9,9)
    w_[0:*:2,0:*:2] = w
    g_low_ = CONVOL(g_low,w_, /EDGE_TRUNCATE)
    dp_ = g_low - g_low_
    D = FLTARR(s[1],s[2],2)
    D[*,*,0] = dp
    D[*,*,1] = dp_
    FOR i = 0 , 1 DO BEGIN
      R = D[*,*,i] + R
      G = D[*,*,i] + G
      B = D[*,*,i] + B
    ENDFOR
    result = FLTARR(s[1],s[2],3)
    result[*,*,0] = B
    result[*,*,1] = G
    result[*,*,2] = R
    print,SIZE(result)
    RETURN, result
END
function HPF,MS,PAN
s = SIZE(MS)
kernel = FLTARR(5,5)
kernel[*,*] = -1
kernel[2,2] = 24
g_high = CONVOL(PAN,kernel, /EDGE_TRUNCATE)
G = FLTARR(s[3])
D = FLTARR(s[1],s[2],s[3])
result = FLTARR(s[1],s[2],s[3])
FOR i = 0 , s[3] - 1 DO BEGIN
  G[i] = CORRELATE(g_high ,MS[*,*,i], /COVARIANCE) / Variance(g_high)
  D[*,*,i] = g_high[*,*] * G[i] * 10
  result[*,*,i] = MS[*,*,i] + D[*,*,i]
ENDFOR
return,result

END

function GPT,PAN
    PAN_ = FLOAT(PAN)
    h = FLTARR(1,5)
    h[0] = 0.0625
    h[1] = 0.25
    h[2] = 0.375
    h[3] = 0.25
    h[4] = 0.0625
    h_T = TRANSPOSE(h)
    w = h ## h_T
    s = SIZE(PAN_)
    g_low = CONVOL(PAN_,w, /EDGE_TRUNCATE)
    g1 = g_low[0:*:2,0:*:2]
    ;n_rows = s[0]
    ;n_cols = s[1]
    ;output = FLTARR(n_rows, n_cols)
    ;kernel_size = 5

    RETURN, g1
END

function RMSE,MS,MS_
s = SIZE(MS_)
result = FLTARR(s[3])
FOR i = 0 , s[3] - 1 DO BEGIN
  E = MEAN((MS[*,*,i] - MS_[*,*,i])^2 )
  result[i] = SQRT(E)
ENDFOR
print,result
return, result
END

function SCC,MS,MS_
s = SIZE(MS_)
P = FLTARR(s[1],s[2],s[3])
P_ = FLTARR(s[1],s[2],s[3])
Kernel = [[-1,-1,-1],[-1,8,-1],[-1,-1,-1]]
CM = FLTARR(s[3])
FOR i = 0 , s[3] - 1 DO BEGIN
  P[*,*,i] = CONVOL(MS[*,*,i],Kernel, /EDGE_TRUNCATE) 
  P_[*,*,i] = CONVOL(MS_[*,*,i],Kernel, /EDGE_TRUNCATE) 
  CM[i] = CORRELATE(P[*,*,i],P_[*,*,i])
ENDFOR
print,CM
return,CM
END

function RASE,MS,MS_
s = SIZE(MS_)
me =  FLTARR(s[3])
MSE = FLTARR(s[3])
FOR i = 0 , s[3] - 1 DO BEGIN
  me[i] = MEAN(MS[*,*,i])
  MSE[i] = MEAN((MS[*,*,i] - MS_[*,*,i])^2 )
ENDFOR
RASE = 100 / (TOTAL(me)) * SQRT(s[3] * TOTAL(MSE))
print,RASE
return,RASE
END

function RGB,MS
R = MS[*,*,4]
G = MS[*,*,2]
B = MS[*,*,1]
result = FLTARR(1600,1600,3)
result[*,*,2] = R
result[*,*,1] = G
result[*,*,0] = B

return,result
END



